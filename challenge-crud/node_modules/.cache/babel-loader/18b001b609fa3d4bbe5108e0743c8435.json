{"ast":null,"code":"import axios from 'axios';\nexport class StudentService {\n  constructor(global) {\n    this.global = global;\n  }\n\n  async getStudents() {\n    // console.log(\"SERVICES :: Students :: GET Students\");\n    //return this.httpTest.callApi(200)\n    return axios.get(`${this.global.url}/students`).then(result => {\n      return result;\n      console.log(result);\n    }).catch(err => {\n      return err;\n    });\n  } //      async getById(userId){\n  //       //return this.httpTest.callApi(500)\n  //       return axios.get(`${this.global.url}/user/${userId}`)\n  //       .then(result => {\n  //         return result;\n  //       }).catch (err =>{\n  //          return err;\n  //       });\n  //     }\n  //    async updateById(id, userObj){\n  //      //console.log(user);\n  //      //return this.httpTest.callApi(500)\n  //      return axios.put(`${this.global.url}/user/${id}`, userObj)\n  //      .then (result => {\n  //        return result;\n  //      }).catch (err =>{\n  //        return err;\n  //      });\n  //    }\n  //    async removeById(userId){\n  //      //return this.httpTest.callApi(500)\n  //      return axios.delete(`${this.global.url}/user/${userId}`)\n  //      .then(result =>{\n  //        return result;\n  //      }).catch (err =>{\n  //        return err;\n  //      });\n  //    }\n  //    async addUsers(user){\n  //      return axios.post(`${this.global.url}/user`, user )\n  //      .then(result =>{\n  //        return result;\n  //      }).catch (err =>{\n  //        return err;\n  //      });\n  //    }\n\n\n}\nexport default StudentService;","map":{"version":3,"sources":["C:/challenge-klever/challenge-crud/src/services/StudentService.ts"],"names":["axios","StudentService","constructor","global","getStudents","get","url","then","result","console","log","catch","err"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAAQC,MAAR,EAA8B;AAAA,SAAtBA,MAAsB,GAAtBA,MAAsB;AACxC;;AAKiB,QAAXC,WAAW,GAAE;AAClB;AACA;AACA,WAAOJ,KAAK,CAACK,GAAN,CAAW,GAAE,KAAKF,MAAL,CAAYG,GAAI,WAA7B,EACJC,IADI,CACCC,MAAM,IAAI;AACd,aAAOA,MAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACD,KAJI,EAIFG,KAJE,CAIKC,GAAG,IAAI;AACf,aAAOA,GAAP;AACD,KANI,CAAP;AAQA,GAlBsB,CAqB5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA3D4B;AA6DvB,eAAeX,cAAf","sourcesContent":["import { GlobalService } from './GlobalService';\r\nimport axios from 'axios';\r\n\r\nexport class StudentService {\r\n    constructor(public global: GlobalService){ \r\n    }\r\n  \r\n\r\n  \r\n  \r\n     async getStudents(){\r\n      // console.log(\"SERVICES :: Students :: GET Students\");\r\n      //return this.httpTest.callApi(200)\r\n      return axios.get(`${this.global.url}/students`)\r\n        .then(result => {\r\n          return result;\r\n          console.log(result);\r\n        }).catch( err => {\r\n          return err;\r\n        });\r\n  \r\n     }\r\n  \r\n      \r\n//      async getById(userId){\r\n//       //return this.httpTest.callApi(500)\r\n//       return axios.get(`${this.global.url}/user/${userId}`)\r\n//       .then(result => {\r\n//         return result;\r\n//       }).catch (err =>{\r\n//          return err;\r\n//       });\r\n//     }\r\n  \r\n//    async updateById(id, userObj){\r\n//      //console.log(user);\r\n//      //return this.httpTest.callApi(500)\r\n//      return axios.put(`${this.global.url}/user/${id}`, userObj)\r\n//      .then (result => {\r\n//        return result;\r\n//      }).catch (err =>{\r\n//        return err;\r\n//      });\r\n//    }\r\n  \r\n//    async removeById(userId){\r\n//      //return this.httpTest.callApi(500)\r\n//      return axios.delete(`${this.global.url}/user/${userId}`)\r\n//      .then(result =>{\r\n//        return result;\r\n//      }).catch (err =>{\r\n//        return err;\r\n//      });\r\n//    }\r\n  \r\n//    async addUsers(user){\r\n//      return axios.post(`${this.global.url}/user`, user )\r\n//      .then(result =>{\r\n//        return result;\r\n//      }).catch (err =>{\r\n//        return err;\r\n//      });\r\n//    }\r\n  \r\n  }  export default StudentService;\r\n"]},"metadata":{},"sourceType":"module"}